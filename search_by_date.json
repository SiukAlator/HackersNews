{"hits":[{"created_at":"2017-09-27T23:33:24.000Z","title":null,"url":null,"author":"RealJon","points":null,"story_text":null,"comment_text":"You don\u0026#x27;t need to plug in any Java code, you can use it with HTTP calls to read and write.\u003Cp\u003ENo plans to break it up into pieces (apart from already consisting of modules). It does one thing, it just happens to be a big thing :-)\u003Cp\u003EIf you have a mac of Linux box you can have it up and running in 10 minutes. Multi-node production deployments are no different because Vespa manages the nodes, not you directly.","num_comments":null,"story_id":15345483,"story_title":"Open-Sourcing Vespa, Yahoo’s Data Processing and Serving Engine","story_url":"https://www.oath.com/press/open-sourcing-vespa-yahoo-s-big-data-processing-and-serving-eng/","parent_id":15352681,"created_at_i":1506555204,"_tags":["comment","author_RealJon","story_15345483"],"objectID":"15353312","_highlightResult":{"author":{"value":"RealJon","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"You don't need to plug in any Java code, you can use it with HTTP calls to read and write.\u003Cp\u003ENo plans to break it up into pieces (apart from already consisting of modules). It does one thing, it just happens to be a big thing :-)\u003Cp\u003EIf you have a mac of Linux box you can have it up and running in 10 minutes. Multi-node production deployments are no different because Vespa manages the \u003Cem\u003Enodes\u003C/em\u003E, not you directly.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Open-Sourcing Vespa, Yahoo’s Data Processing and Serving Engine","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://www.oath.com/press/open-sourcing-vespa-yahoo-s-big-data-processing-and-serving-eng/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T23:17:07.000Z","title":"Node8’s util.promisify is so freakin’ awesome","url":"https://medium.com/@jamesjefferyuk/node8s-util-promisify-is-so-freakin-awesome-1d90c184bf44","author":"JamesTheHacker","points":2,"story_text":null,"comment_text":null,"num_comments":0,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1506554227,"_tags":["story","author_JamesTheHacker","story_15353234"],"objectID":"15353234","_highlightResult":{"title":{"value":"Node8’s util.promisify is so freakin’ awesome","matchLevel":"none","matchedWords":[]},"url":{"value":"https://medium.com/@jamesjefferyuk/\u003Cem\u003Enode8s\u003C/em\u003E-util-promisify-is-so-freakin-awesome-1d90c184bf44","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"author":{"value":"JamesTheHacker","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T22:53:52.000Z","title":"How to connect 3+ nodes in a private Ethereum network","url":"https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/","author":"osmode","points":1,"story_text":null,"comment_text":null,"num_comments":0,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1506552832,"_tags":["story","author_osmode","story_15353081"],"objectID":"15353081","_highlightResult":{"title":{"value":"How to connect 3+ \u003Cem\u003Enodes\u003C/em\u003E in a private Ethereum network","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"url":{"value":"https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-\u003Cem\u003Enodes\u003C/em\u003E-in-a-private-ethereum-network/","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"author":{"value":"osmode","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T22:35:17.000Z","title":null,"url":null,"author":"colanderman","points":null,"story_text":null,"comment_text":"Keep in mind that the log n factor of a B+tree is generally very low; B+tree branching factors are typically in the 100s. Also, the first few levels are generally kept in cache, so you\u0026#x27;ll only have to hit disk for inner nodes past 100 million entries or so.\u003Cp\u003EFinally, hash indexes always require that the found row be confirmed in the data table, even for simple existence queries, since the keys themselves aren\u0026#x27;t stored in the hash table. (This is why hash indexes can\u0026#x27;t be UNIQUE.) B+trees can often answer such queries without the extra lookup (an \u0026quot;index-only scan\u0026quot;). If your B+tree is so large that its inner nodes spill onto disk (necessitating a 2nd disk seek), chances are the equivalent hash index will as well, which, combined with the consult of the data table, kind of negates the benefit.","num_comments":null,"story_id":15344964,"story_title":"PostgreSQL's Hash Indexes Are Now Cool","story_url":"http://rhaas.blogspot.com/2017/09/postgresqls-hash-indexes-are-now-cool.html?m=1","parent_id":15352110,"created_at_i":1506551717,"_tags":["comment","author_colanderman","story_15344964"],"objectID":"15352955","_highlightResult":{"author":{"value":"colanderman","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Keep in mind that the log n factor of a B+tree is generally very low; B+tree branching factors are typically in the 100s. Also, the first few levels are generally kept in cache, so you'll only have to hit disk for inner \u003Cem\u003Enodes\u003C/em\u003E past 100 million entries or so.\u003Cp\u003EFinally, hash indexes always require that the found row be confirmed in the data table, even for simple existence queries, since the keys themselves aren't stored in the hash table. (This is why hash indexes can't be UNIQUE.) B+trees can often answer such queries without the extra lookup (an \u0026quot;index-only scan\u0026quot;). If your B+tree is so large that its inner \u003Cem\u003Enodes\u003C/em\u003E spill onto disk (necessitating a 2nd disk seek), chances are the equivalent hash index will as well, which, combined with the consult of the data table, kind of negates the benefit.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"PostgreSQL's Hash Indexes Are Now Cool","matchLevel":"none","matchedWords":[]},"story_url":{"value":"http://rhaas.blogspot.com/2017/09/postgresqls-hash-indexes-are-now-cool.html?m=1","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T21:45:12.000Z","title":null,"url":null,"author":"jkchu","points":null,"story_text":null,"comment_text":"In college, my programming classes were mostly in C++, Java, and C#. Those languages are generally important\u0026#x2F;important for working at companies like Google, Microsoft, Amazon, etc.\u003Cp\u003EA vast number of jobs these days are looking for developers with experience working with web applications. Full-stack and front-end developers will almost always need to know JavaScript (mainly for client-side application development).\u003Cp\u003EIf you are hoping to just get your foot in the door and feel out if you enjoy programming or not, I would recommend starting with Python. It is widely used language that is easy to jump into and learn.\u003Cp\u003EIf you are hoping to learn programming via working on a small side project there are some great NodeJS courses\u0026#x2F;tutorials online. Personally, I\u0026#x27;ve found some good courses of Udemy.com and some great tutorials at Thinkster.io.\u003Cp\u003EHope this helps!","num_comments":null,"story_id":15352514,"story_title":"Ask HN: What language should I learn first? Any specific resources?","story_url":null,"parent_id":15352514,"created_at_i":1506548712,"_tags":["comment","author_jkchu","story_15352514"],"objectID":"15352616","_highlightResult":{"author":{"value":"jkchu","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"In college, my programming classes were mostly in C++, Java, and C#. Those languages are generally important/important for working at companies like Google, Microsoft, Amazon, etc.\u003Cp\u003EA vast number of jobs these days are looking for developers with experience working with web applications. Full-stack and front-end developers will almost always need to know JavaScript (mainly for client-side application development).\u003Cp\u003EIf you are hoping to just get your foot in the door and feel out if you enjoy programming or not, I would recommend starting with Python. It is widely used language that is easy to jump into and learn.\u003Cp\u003EIf you are hoping to learn programming via working on a small side project there are some great \u003Cem\u003ENodeJS\u003C/em\u003E courses/tutorials online. Personally, I've found some good courses of Udemy.com and some great tutorials at Thinkster.io.\u003Cp\u003EHope this helps!","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Ask HN: What language should I learn first? Any specific resources?","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T20:40:05.000Z","title":null,"url":null,"author":"nodesocket","points":null,"story_text":null,"comment_text":"Just finished Manhunt: Unabomber[1] on Netflix. According to the show, it was Ted Kaczynski\u0026#x27;s entire defense to rebuttal his charges saying forensic linguistics and the FBI agent who \u0026quot;cracked\u0026quot; the case had no precedent. The agent was in fact a traffic cop before becoming an FBI agent and had little formal linguistics training. Instead Ted\u0026#x27;s defense behind his back went with insanity and tried to get him to plead to \u0026quot;save his life\u0026quot;. Ted chose to plead guilty instead of insanity fearing his ideology and manifesto would be ignored if he pleased insanity.\u003Cp\u003E[1] \u003Ca href=\"https:\u0026#x2F;\u0026#x2F;www.discovery.com\u0026#x2F;tv-shows\u0026#x2F;manhunt-unabomber\u0026#x2F;\" rel=\"nofollow\"\u003Ehttps:\u0026#x2F;\u0026#x2F;www.discovery.com\u0026#x2F;tv-shows\u0026#x2F;manhunt-unabomber\u0026#x2F;\u003C/a\u003E","num_comments":null,"story_id":15351433,"story_title":"What happens after a defendant is found not guilty by reason of insanity?","story_url":"https://www.nytimes.com/2017/09/27/magazine/when-not-guilty-is-a-life-sentence.html","parent_id":15351433,"created_at_i":1506544805,"_tags":["comment","author_nodesocket","story_15351433"],"objectID":"15352096","_highlightResult":{"author":{"value":"\u003Cem\u003Enodes\u003C/em\u003Eocket","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"comment_text":{"value":"Just finished Manhunt: Unabomber[1] on Netflix. According to the show, it was Ted Kaczynski's entire defense to rebuttal his charges saying forensic linguistics and the FBI agent who \u0026quot;cracked\u0026quot; the case had no precedent. The agent was in fact a traffic cop before becoming an FBI agent and had little formal linguistics training. Instead Ted's defense behind his back went with insanity and tried to get him to plead to \u0026quot;save his life\u0026quot;. Ted chose to plead guilty instead of insanity fearing his ideology and manifesto would be ignored if he pleased insanity.\u003Cp\u003E[1] \u003Ca href=\"https://www.discovery.com/tv-shows/manhunt-unabomber/\" rel=\"nofollow\"\u003Ehttps://www.discovery.com/tv-shows/manhunt-unabomber/\u003C/a\u003E","matchLevel":"none","matchedWords":[]},"story_title":{"value":"What happens after a defendant is found not guilty by reason of insanity?","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://www.nytimes.com/2017/09/27/magazine/when-not-guilty-is-a-life-sentence.html","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T20:10:15.000Z","title":null,"url":null,"author":"jandrese","points":null,"story_text":null,"comment_text":"If you\u0026#x27;re willing to burn O(n) memory on it you could just create an array of pointers to the nodes in the list and then use that to build the balanced tree.  It\u0026#x27;s probably faster than iterating over the sublist every time to find the center.\u003Cp\u003EThis assumes of course that the list is sorted.  If not, you should probably sort the list first to avoid driving yourself insane.\u003Cp\u003EIf memory is too tight to make temporary storage and the list is too big to sort and you want a perfectly balanced tree then you\u0026#x27;ve got an interesting problem on your hands.","num_comments":null,"story_id":15347519,"story_title":"The Great Tree-List Recursion Problem (2000)","story_url":"http://cslibrary.stanford.edu/109/TreeListRecursion.html","parent_id":15351504,"created_at_i":1506543015,"_tags":["comment","author_jandrese","story_15347519"],"objectID":"15351820","_highlightResult":{"author":{"value":"jandrese","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"If you're willing to burn O(n) memory on it you could just create an array of pointers to the \u003Cem\u003Enodes\u003C/em\u003E in the list and then use that to build the balanced tree.  It's probably faster than iterating over the sublist every time to find the center.\u003Cp\u003EThis assumes of course that the list is sorted.  If not, you should probably sort the list first to avoid driving yourself insane.\u003Cp\u003EIf memory is too tight to make temporary storage and the list is too big to sort and you want a perfectly balanced tree then you've got an interesting problem on your hands.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"The Great Tree-List Recursion Problem (2000)","matchLevel":"none","matchedWords":[]},"story_url":{"value":"http://cslibrary.stanford.edu/109/TreeListRecursion.html","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T19:39:19.000Z","title":null,"url":null,"author":"tzs","points":null,"story_text":null,"comment_text":"You could convert a singly-linked list to a doubly-linked list in O(n), and then apply your favorite doubly-linked solution.\u003Cp\u003EYou could even do this in place without increasing the size of each node at the cost of doubling the size of variables that point to nodes and slightly lowing down stepping through the list. You do this by storing the next and previous pointers for each node in the same location, xor\u0026#x27;ed together.\u003Cp\u003EThat doubles the size of variables that point to nodes and slows down stepping because you have to turn them into structs that store both a pointer to the node and a pointer to an adjacent node and update both of these pointers as you move through the list.","num_comments":null,"story_id":15347519,"story_title":"The Great Tree-List Recursion Problem (2000)","story_url":"http://cslibrary.stanford.edu/109/TreeListRecursion.html","parent_id":15351148,"created_at_i":1506541159,"_tags":["comment","author_tzs","story_15347519"],"objectID":"15351504","_highlightResult":{"author":{"value":"tzs","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"You could convert a singly-linked list to a doubly-linked list in O(n), and then apply your favorite doubly-linked solution.\u003Cp\u003EYou could even do this in place without increasing the size of each node at the cost of doubling the size of variables that point to \u003Cem\u003Enodes\u003C/em\u003E and slightly lowing down stepping through the list. You do this by storing the next and previous pointers for each node in the same location, xor'ed together.\u003Cp\u003EThat doubles the size of variables that point to \u003Cem\u003Enodes\u003C/em\u003E and slows down stepping because you have to turn them into structs that store both a pointer to the node and a pointer to an adjacent node and update both of these pointers as you move through the list.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"The Great Tree-List Recursion Problem (2000)","matchLevel":"none","matchedWords":[]},"story_url":{"value":"http://cslibrary.stanford.edu/109/TreeListRecursion.html","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T15:35:08.000Z","title":null,"url":null,"author":"chmod775","points":null,"story_text":null,"comment_text":"If I\u0026#x27;m going to assume that by \u0026quot;node.js\u0026quot; code, you actually mean JavaScript code running within the V8 engine as a part of the whole that is Node.JS, then: The answer is no, you cannot do that using pure JS and without using (external) stuff like WebWorkers.\u003Cp\u003EIf you are talking more generally about anything we can run within Node.JS, is using Node.JS user-facing APIs and works without doing any modifications to Node.JS, the answer is yes. You can easily achieve that with node\u0026#x27;s native module support, and I would encourage you to do so over committing the folly of doing anything CPU intensive in JS.\u003Cp\u003EThat is if you manage to find any CPU intensive task that isn\u0026#x27;t already handled by node built-ins or some library out there.\u003Cp\u003E\u003Ci\u003EEdit:\u003C/i\u003E\u003Cp\u003ENow you may say: \u0026quot;Ahah! You can\u0026#x27;t use threads using [limited usage of node]. Also threads must be usable for arbitrary workloads in order to consider a thing multi-threaded. Node.js is single-threaded!\u0026quot;\u003Cp\u003EI just can\u0026#x27;t argue with that. It\u0026#x27;s just a matter of opinions now about what makes a thing\u0026#x2F;environment single-threaded, and what makes it multi-threaded.\u003Cp\u003ETo me it\u0026#x27;s simple: [x] Thing uses multiple threads to perform work.","num_comments":null,"story_id":15326648,"story_title":"Windows 3.1 All Over Again","story_url":"https://tomjoro.github.io/2017-02-03-why-reactive-fp-sucks/","parent_id":15336667,"created_at_i":1506526508,"_tags":["comment","author_chmod775","story_15326648"],"objectID":"15348835","_highlightResult":{"author":{"value":"chmod775","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"If I'm going to assume that by \u0026quot;\u003Cem\u003Enode.js\u003C/em\u003E\u0026quot; code, you actually mean JavaScript code running within the V8 engine as a part of the whole that is \u003Cem\u003ENode.JS\u003C/em\u003E, then: The answer is no, you cannot do that using pure JS and without using (external) stuff like WebWorkers.\u003Cp\u003EIf you are talking more generally about anything we can run within \u003Cem\u003ENode.JS\u003C/em\u003E, is using \u003Cem\u003ENode.JS\u003C/em\u003E user-facing APIs and works without doing any modifications to \u003Cem\u003ENode.JS\u003C/em\u003E, the answer is yes. You can easily achieve that with node's native module support, and I would encourage you to do so over committing the folly of doing anything CPU intensive in JS.\u003Cp\u003EThat is if you manage to find any CPU intensive task that isn't already handled by node built-ins or some library out there.\u003Cp\u003E\u003Ci\u003EEdit:\u003C/i\u003E\u003Cp\u003ENow you may say: \u0026quot;Ahah! You can't use threads using [limited usage of node]. Also threads must be usable for arbitrary workloads in order to consider a thing multi-threaded. \u003Cem\u003ENode.js\u003C/em\u003E is single-threaded!\u0026quot;\u003Cp\u003EI just can't argue with that. It's just a matter of opinions now about what makes a thing/environment single-threaded, and what makes it multi-threaded.\u003Cp\u003ETo me it's simple: [x] Thing uses multiple threads to perform work.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Windows 3.1 All Over Again","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://tomjoro.github.io/2017-02-03-why-reactive-fp-sucks/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T15:24:00.000Z","title":null,"url":null,"author":"mbrumlow","points":null,"story_text":null,"comment_text":"I don\u0026#x27;t agree. The tree being balanced of not has not bearing on the solvability of the problem.\u003Cp\u003EEven a naive approach would work balanced or unbalanced and that would be simply to pop the lowest value in the tree and construct your list until you run out of nodes.\u003Cp\u003EThe trick is to do it in O(n) time and use recursion.","num_comments":null,"story_id":15347519,"story_title":"The Great Tree-List Recursion Problem (2000)","story_url":"http://cslibrary.stanford.edu/109/TreeListRecursion.html","parent_id":15347948,"created_at_i":1506525840,"_tags":["comment","author_mbrumlow","story_15347519"],"objectID":"15348699","_highlightResult":{"author":{"value":"mbrumlow","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I don't agree. The tree being balanced of not has not bearing on the solvability of the problem.\u003Cp\u003EEven a naive approach would work balanced or unbalanced and that would be simply to pop the lowest value in the tree and construct your list until you run out of \u003Cem\u003Enodes\u003C/em\u003E.\u003Cp\u003EThe trick is to do it in O(n) time and use recursion.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"The Great Tree-List Recursion Problem (2000)","matchLevel":"none","matchedWords":[]},"story_url":{"value":"http://cslibrary.stanford.edu/109/TreeListRecursion.html","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T15:06:14.000Z","title":"Node v8.6.0","url":"https://nodejs.org/en/blog/release/v8.6.0/","author":"nikolay","points":1,"story_text":null,"comment_text":null,"num_comments":2,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1506524774,"_tags":["story","author_nikolay","story_15348473"],"objectID":"15348473","_highlightResult":{"title":{"value":"Node v8.6.0","matchLevel":"none","matchedWords":[]},"url":{"value":"https://\u003Cem\u003Enodejs\u003C/em\u003E.org/en/blog/release/v8.6.0/","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"author":{"value":"nikolay","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T15:00:03.000Z","title":null,"url":null,"author":"EGreg","points":null,"story_text":null,"comment_text":"In the past I really worried about open source networked software, because however you slice it, it is missing a huge chunk of security by obscurity, making 0days very likely. Especially for new projects. All security vulnerabilities are out in the open for all to see. Sure, honeypots can help you learn about vulnerabilities, but it will take years to patch them all. In the meantime, everyone using your software is vulnerable.\u003Cp\u003EThen I discovered blockchains. Here, the software is \u003Ci\u003Erun by the network\u003C/i\u003E and does nothing persistent unless a majority of the nodes agree. That makes it much harder to corrupt the persistence layer. Blockchains are NOT just for achieving global consensus about a ledger. They can be per-stream-of-data. That\u0026#x27;s the approach we take at Qbix.\u003Cp\u003EThere are still many other vectors of attack besides corrupting the database. However, in Web apps, the real pernicious thing is corrupting the data. Everything else has already been secured by webserver makers and language runtime designers.\u003Cp\u003EPS: Finally, you can corrupt things on the client level, eg making a client sign a transaction the user didn\u0026#x27;t authorize. But at least it is localized to the corrupted clients, and not the whole network.","num_comments":null,"story_id":15346487,"story_title":"Coding in the open: how to do it securely","story_url":"https://gdstechnology.blog.gov.uk/2017/09/27/dont-be-afraid-to-code-in-the-open-heres-how-to-do-it-securely/","parent_id":15346487,"created_at_i":1506524403,"_tags":["comment","author_EGreg","story_15346487"],"objectID":"15348418","_highlightResult":{"author":{"value":"EGreg","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"In the past I really worried about open source networked software, because however you slice it, it is missing a huge chunk of security by obscurity, making 0days very likely. Especially for new projects. All security vulnerabilities are out in the open for all to see. Sure, honeypots can help you learn about vulnerabilities, but it will take years to patch them all. In the meantime, everyone using your software is vulnerable.\u003Cp\u003EThen I discovered blockchains. Here, the software is \u003Ci\u003Erun by the network\u003C/i\u003E and does nothing persistent unless a majority of the \u003Cem\u003Enodes\u003C/em\u003E agree. That makes it much harder to corrupt the persistence layer. Blockchains are NOT just for achieving global consensus about a ledger. They can be per-stream-of-data. That's the approach we take at Qbix.\u003Cp\u003EThere are still many other vectors of attack besides corrupting the database. However, in Web apps, the real pernicious thing is corrupting the data. Everything else has already been secured by webserver makers and language runtime designers.\u003Cp\u003EPS: Finally, you can corrupt things on the client level, eg making a client sign a transaction the user didn't authorize. But at least it is localized to the corrupted clients, and not the whole network.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Coding in the open: how to do it securely","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://gdstechnology.blog.gov.uk/2017/09/27/dont-be-afraid-to-code-in-the-open-heres-how-to-do-it-securely/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T14:59:39.000Z","title":null,"url":null,"author":"zzzcpan","points":null,"story_text":null,"comment_text":"I saw a website recently that I couldn\u0026#x27;t load. Neither multiple different exit nodes through tor browser nor clean residential IP though chrome on linux worked and cloudflare\u0026#x27;s captcha was impossibly difficult to solve, I gave up after multiple attempts. Thankfully nice people here reposted the content into a comment.\u003Cp\u003ECloudflare still has a long way to go in terms of being nice to humans.","num_comments":null,"story_id":15347508,"story_title":"Cloudflare Stream – Combines video encoding, global delivery, and player","story_url":"https://blog.cloudflare.com/introducing-cloudflare-stream/","parent_id":15348140,"created_at_i":1506524379,"_tags":["comment","author_zzzcpan","story_15347508"],"objectID":"15348417","_highlightResult":{"author":{"value":"zzzcpan","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I saw a website recently that I couldn't load. Neither multiple different exit \u003Cem\u003Enodes\u003C/em\u003E through tor browser nor clean residential IP though chrome on linux worked and cloudflare's captcha was impossibly difficult to solve, I gave up after multiple attempts. Thankfully nice people here reposted the content into a comment.\u003Cp\u003ECloudflare still has a long way to go in terms of being nice to humans.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Cloudflare Stream – Combines video encoding, global delivery, and player","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://blog.cloudflare.com/introducing-cloudflare-stream/","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T14:32:35.000Z","title":null,"url":null,"author":"jasode","points":null,"story_text":null,"comment_text":"\u003Ci\u003E\u0026gt;Anyway, so far we\u0026#x27;ve built Shelf primarily on a NodeJs stack [...] And we built a web clipper as browser extension for Chrome and Firefox [...]\u003C/i\u003E\u003Cp\u003EThanks for providing extra technical detail.  However, I\u0026#x27;m more curious with what\u0026#x27;s happening on the backend.\u003Cp\u003EAs far as I can tell, the your differentiation from something like MS Sharepoint or DropBox is an integrated OCR to extract keywords, and Artificial Intelligence to help \u003Ci\u003Efilter\u003C/i\u003E (or \u003Ci\u003E\u0026quot;screen\u0026quot;\u003C/i\u003E as your landing pages call it).  Is there more to your special sauce that I have overlooked?\u003Cp\u003EAlso, where are you storing customers\u0026#x27; data?  Amazon S3?  In house servers?  Are you using something like ElasticSearch or did you build your own search engine?","num_comments":null,"story_id":15347506,"story_title":"Show HN: Shelf – A better way to share knowledge across teams and organizations","story_url":"https://shelf.io","parent_id":15347535,"created_at_i":1506522755,"_tags":["comment","author_jasode","story_15347506"],"objectID":"15348128","_highlightResult":{"author":{"value":"jasode","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"\u003Ci\u003E\u0026gt;Anyway, so far we've built Shelf primarily on a \u003Cem\u003ENodeJs\u003C/em\u003E stack [...] And we built a web clipper as browser extension for Chrome and Firefox [...]\u003C/i\u003E\u003Cp\u003EThanks for providing extra technical detail.  However, I'm more curious with what's happening on the backend.\u003Cp\u003EAs far as I can tell, the your differentiation from something like MS Sharepoint or DropBox is an integrated OCR to extract keywords, and Artificial Intelligence to help \u003Ci\u003Efilter\u003C/i\u003E (or \u003Ci\u003E\u0026quot;screen\u0026quot;\u003C/i\u003E as your landing pages call it).  Is there more to your special sauce that I have overlooked?\u003Cp\u003EAlso, where are you storing customers' data?  Amazon S3?  In house servers?  Are you using something like ElasticSearch or did you build your own search engine?","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Show HN: Shelf – A better way to share knowledge across teams and organizations","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://shelf.io","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T13:24:23.000Z","title":null,"url":null,"author":"tfjaeckel","points":null,"story_text":null,"comment_text":"Hi, I\u0026#x27;m one of the founders of Shelf. We think teams and organizations are wasting too much time locating and sharing knowledge.\u003Cp\u003EBeen working on helping solve this this issue for quite a while now keeping things in more of a closed circle of beta users until recently. Why? Because we wanted to build a well rounded product based on customer feedback before opening this thing up.\u003Cp\u003EAnyway, so far we\u0026#x27;ve built Shelf primarily on a NodeJs stack making heavy use of microservices and recently more and more Lambdas with (and sometimes without) the Serverless framework. And we built a web clipper as browser extension for Chrome and Firefox to make it easier to clip and share web content.\u003Cp\u003EWould love to get your feedback on if and how you experience the pain point. Of course feedback on the product itself would be great, too, if you want to give it a spin.","num_comments":null,"story_id":15347506,"story_title":"Show HN: Shelf – A better way to share knowledge across teams and organizations","story_url":"https://shelf.io","parent_id":15347506,"created_at_i":1506518663,"_tags":["comment","author_tfjaeckel","story_15347506"],"objectID":"15347535","_highlightResult":{"author":{"value":"tfjaeckel","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"Hi, I'm one of the founders of Shelf. We think teams and organizations are wasting too much time locating and sharing knowledge.\u003Cp\u003EBeen working on helping solve this this issue for quite a while now keeping things in more of a closed circle of beta users until recently. Why? Because we wanted to build a well rounded product based on customer feedback before opening this thing up.\u003Cp\u003EAnyway, so far we've built Shelf primarily on a \u003Cem\u003ENodeJs\u003C/em\u003E stack making heavy use of microservices and recently more and more Lambdas with (and sometimes without) the Serverless framework. And we built a web clipper as browser extension for Chrome and Firefox to make it easier to clip and share web content.\u003Cp\u003EWould love to get your feedback on if and how you experience the pain point. Of course feedback on the product itself would be great, too, if you want to give it a spin.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Show HN: Shelf – A better way to share knowledge across teams and organizations","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://shelf.io","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T13:15:08.000Z","title":"Show HN: Direct IO for Node.js","url":"https://www.npmjs.com/package/@ronomon/direct-io","author":"jorangreef","points":2,"story_text":null,"comment_text":null,"num_comments":0,"story_id":null,"story_title":null,"story_url":null,"parent_id":null,"created_at_i":1506518108,"_tags":["story","author_jorangreef","story_15347443","show_hn"],"objectID":"15347443","_highlightResult":{"title":{"value":"Show HN: Direct IO for \u003Cem\u003ENode.js\u003C/em\u003E","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"url":{"value":"https://www.npmjs.com/package/@ronomon/direct-io","matchLevel":"none","matchedWords":[]},"author":{"value":"jorangreef","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T12:29:32.000Z","title":null,"url":null,"author":"nathan_long","points":null,"story_text":null,"comment_text":"\u0026gt; With NoSQL, the key\u0026#x2F;values are a lot simpler to replicate apparently.\u003Cp\u003EIf all you need is a key\u0026#x2F;value store, I can see how that simplifies replication. Eg, if you have the key \u0026quot;foobar\u0026quot; and a 12-node cluster, you convert it to a number using a hash function, do \u0026quot;module 12\u0026quot;, and that tells you which node to store the value on. If you want to store it on 2 nodes, do this again with a second hash function.\u003Cp\u003EThat\u0026#x27;s lovely - \u003Ci\u003Eas long as you don\u0026#x27;t need to join records, and never will\u003C/i\u003E. It\u0026#x27;s a risky prediction.","num_comments":null,"story_id":15335717,"story_title":"Why SQL is beating NoSQL, and what this means for the future of data","story_url":"https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a","parent_id":15335862,"created_at_i":1506515372,"_tags":["comment","author_nathan_long","story_15335717"],"objectID":"15347070","_highlightResult":{"author":{"value":"nathan_long","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"\u0026gt; With NoSQL, the key/values are a lot simpler to replicate apparently.\u003Cp\u003EIf all you need is a key/value store, I can see how that simplifies replication. Eg, if you have the key \u0026quot;foobar\u0026quot; and a 12-node cluster, you convert it to a number using a hash function, do \u0026quot;module 12\u0026quot;, and that tells you which node to store the value on. If you want to store it on 2 \u003Cem\u003Enodes\u003C/em\u003E, do this again with a second hash function.\u003Cp\u003EThat's lovely - \u003Ci\u003Eas long as you don't need to join records, and never will\u003C/i\u003E. It's a risky prediction.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Why SQL is beating NoSQL, and what this means for the future of data","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T11:07:12.000Z","title":null,"url":null,"author":"czechdeveloper","points":null,"story_text":null,"comment_text":"I wonder for past few years about backup language\u0026#x2F;stack\u0026#x2F;job for me, because my technical life has been MS only. And quite often discontinued tech (Silverlight, WebForms).\u003Cp\u003EI should get that going I guess. I just can\u0026#x27;t decide what to learn and it\u0026#x27;s difficult to find time (nodejs? Go? Python?).","num_comments":null,"story_id":15345694,"story_title":"Microsoft Becomes Sponsor of Open Source Initiative","story_url":"https://opensource.org/node/901","parent_id":15346198,"created_at_i":1506510432,"_tags":["comment","author_czechdeveloper","story_15345694"],"objectID":"15346582","_highlightResult":{"author":{"value":"czechdeveloper","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I wonder for past few years about backup language/stack/job for me, because my technical life has been MS only. And quite often discontinued tech (Silverlight, WebForms).\u003Cp\u003EI should get that going I guess. I just can't decide what to learn and it's difficult to find time (\u003Cem\u003Enodejs\u003C/em\u003E? Go? Python?).","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Microsoft Becomes Sponsor of Open Source Initiative","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://opensource.org/node/901","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T10:25:11.000Z","title":null,"url":null,"author":"danabramov","points":null,"story_text":null,"comment_text":"The feature is mostly intended for rendering into nodes \u003Ci\u003Enot\u003C/i\u003E managed by React. Such as a document child that is sibling to the application root.","num_comments":null,"story_id":15339983,"story_title":"React 16","story_url":"https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html","parent_id":15344770,"created_at_i":1506507911,"_tags":["comment","author_danabramov","story_15339983"],"objectID":"15346371","_highlightResult":{"author":{"value":"danabramov","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"The feature is mostly intended for rendering into \u003Cem\u003Enodes\u003C/em\u003E \u003Ci\u003Enot\u003C/i\u003E managed by React. Such as a document child that is sibling to the application root.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"React 16","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html","matchLevel":"none","matchedWords":[]}}},{"created_at":"2017-09-27T08:44:53.000Z","title":null,"url":null,"author":"elvinyung","points":null,"story_text":null,"comment_text":"I think at a glance, it\u0026#x27;s basically a much more scalable version of something like Elasticsearch, optimized for very quick wide fanout to a large number of leaf nodes.\u003Cp\u003EIt\u0026#x27;s a datastore in its own right (just like ES), but I imagine that e.g. you wouldn\u0026#x27;t use it to handle transactions.","num_comments":null,"story_id":15345483,"story_title":"Yahoo open sources its search engine Vespa","story_url":"https://www.oath.com/press/open-sourcing-vespa-yahoo-s-big-data-processing-and-serving-eng/","parent_id":15345913,"created_at_i":1506501893,"_tags":["comment","author_elvinyung","story_15345483"],"objectID":"15345950","_highlightResult":{"author":{"value":"elvinyung","matchLevel":"none","matchedWords":[]},"comment_text":{"value":"I think at a glance, it's basically a much more scalable version of something like Elasticsearch, optimized for very quick wide fanout to a large number of leaf \u003Cem\u003Enodes\u003C/em\u003E.\u003Cp\u003EIt's a datastore in its own right (just like ES), but I imagine that e.g. you wouldn't use it to handle transactions.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["nodejs"]},"story_title":{"value":"Yahoo open sources its search engine Vespa","matchLevel":"none","matchedWords":[]},"story_url":{"value":"https://www.oath.com/press/open-sourcing-vespa-yahoo-s-big-data-processing-and-serving-eng/","matchLevel":"none","matchedWords":[]}}}],"nbHits":36255,"page":0,"nbPages":50,"hitsPerPage":20,"processingTimeMS":6,"exhaustiveNbHits":false,"query":"nodejs","params":"advancedSyntax=true\u0026analytics=false\u0026query=nodejs"}